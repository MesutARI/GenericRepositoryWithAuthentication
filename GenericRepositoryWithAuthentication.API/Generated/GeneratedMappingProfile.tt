<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>


// 
// This is an auto generated file. 
// Do not make manual change
//  
using AutoMapper;
using GenericRepositoryWithAuthentication.API.DTO;
using GenericRepositoryWithAuthentication.Core.Models;

namespace GenericRepositoryWithAuthentication.API.Mapping
{
	public partial class MappingProfile : Profile
    {
		public MappingProfile()
		{
			<# foreach(var name in GetModelNames())
			{#>
			
			CreateMap<<#=name.Replace("DTO", String.Empty)#>, <#=name#>>();
			CreateMap<<#=name#>, <#=name.Replace("DTO", String.Empty)#>>();
			
			<#
			}#>

		}
	}
}
<#  
  SaveGeneratedCodeAsFile("MappingProfile" + ".g.cs");
  
#>

<#+
private IEnumerable<string> GetModelNames()
{
	string dir = Path.GetDirectoryName(Host.TemplateFile);
	dir = dir.Replace("Generated", "DTO");
	string[] fileEntries = Directory.GetFiles(dir);
	for (int i = 0; i < fileEntries.Length; i++)
    {
		fileEntries[i] = fileEntries[i].Substring(dir.Length + 1);
		fileEntries[i] = fileEntries[i].Replace(".cs",String.Empty);
    }

	return fileEntries;
}

private void SaveGeneratedCodeAsFile(string fileName)
{
    string dir = Path.GetDirectoryName(Host.TemplateFile);
  
    string outputFilePath = Path.Combine(dir, fileName);
    File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 
 
    GenerationEnvironment.Clear();
}

#>
