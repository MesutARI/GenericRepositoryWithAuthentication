<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>


<# 
foreach(var name in GetModelNames())
{

#>
// 
// This is an auto generated file. 
// Do not make manual change
//  

using GenericRepositoryWithAuthentication.Core.Models;
using GenericRepositoryWithAuthentication.Core.Repositories;
using GenericRepositoryWithAuthentication.Core.Services;
using GenericRepositoryWithAuthentication.Data.Repositories;

namespace GenericRepositoryWithAuthentication.Service.Services
{
	public partial class <#=name#>Service :GenericService<<#=name#>>, I<#=name#>Service
    {
		public <#=name#>Service(I<#=name#>Repository repository) : base(repository)
        {
        }
		public <#=name#>Repository _repository { get { return _repository as <#=name#>Repository; } }

	}
}
<#  
  SaveGeneratedCodeAsFile(name + "Service.g.cs");
  }
#>

<#+
private IEnumerable<string> GetModelNames()
{
	string dir = Path.GetDirectoryName(Host.TemplateFile);
	dir = dir.Replace("Service", "Core");
	dir = dir.Replace("Generated", "Models");
	string[] fileEntries = Directory.GetFiles(dir);
	for (int i = 0; i < fileEntries.Length; i++)
    {
		fileEntries[i] = fileEntries[i].Substring(dir.Length + 1);
		fileEntries[i] = fileEntries[i].Replace(".cs",String.Empty);
    }

	return fileEntries.Where(r => r != "User").ToArray();
}

private void SaveGeneratedCodeAsFile(string fileName)
{
    string dir = Path.GetDirectoryName(Host.TemplateFile);
  
    string outputFilePath = Path.Combine(dir, fileName);
    File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 
 
    GenerationEnvironment.Clear();
}


#>
